(ns dk.cst.dannet.web.client
  "The central namespace of the frontend app."
  (:require [clojure.string :as str]
            [rum.core :as rum]
            [reitit.frontend :as rf]
            [reitit.frontend.easy :as rfe :refer [href]]
            [reitit.frontend.history :as rfh]
            [dk.cst.dannet.web.components :as com]
            [dk.cst.dannet.shared :as shared])
  (:import [goog Uri]))

;; The React root element.
(defonce root (atom nil))

(defonce location
  (atom {}))

(defonce visited
  (atom {:back    '()
         :forward '()}))

(def app
  (js/document.getElementById "app"))

;; All paths prefixed with /dannet/ are matched, content generated by the SPA.
;; Other routes bypass the frontend routing entirely, e.g. /download/...
;; Please refer to /doc/web.md to see how routing is meant to work.
(def routes
  [["/dannet" :delegate-root]
   ["/dannet/{*path}" :delegate-path]])

;; TODO: also do this for back/forward button
(defn- update-scroll-opts
  [history opts]
  (conj
    (rest history)
    [(ffirst history) opts]))

(defn- update-scroll-state!
  "Scroll to the top of the page if `url` is not from back/forward button."
  [url]
  (let [{:keys [back forward] :as urls} @visited
        [back-url back-opts] (first (rest back))
        [forward-url forward-opts] (first forward)
        anchor-click?   (-> urls meta :anchor-click?)
        back-button?    (= url back-url)
        forward-button? (= url forward-url)
        content-element (js/document.getElementById "content")]
    (swap! visited vary-meta dissoc :anchor-click?)
    (if (or anchor-click? (not (or back-button? forward-button?)))
      (let [opts (clj->js {:top (.-scrollTop content-element)})]
        (.scroll content-element #js {:top 0})
        (swap! visited assoc
               :back (if (empty? back)
                       (list [url #js {:top 0}])
                       (conj (update-scroll-opts back opts)
                             [url #js {:top 0}]))
               :forward '()))
      (cond
        back-button?
        (do
          (.scroll content-element back-opts)
          (swap! visited assoc
                 :back (rest back)
                 :forward (cons (first back) forward)))

        forward-button?
        (do
          (.scroll content-element forward-opts)
          (swap! visited assoc
                 :back (conj back (first forward))
                 :forward (rest forward)))))))

(defn- ignore-anchor-click?
  "Adds a side-effect to any intercepted anchor clicks in reitit making sure
  that the scroll state always resets when intentionally clicking a link.

  Works in conjunction with 'update-scroll-state!' defined above."
  [router e el uri]
  (when (and (rfh/ignore-anchor-click? router e el uri)
             ;; don't include downloads in client routing
             (not (re-find #"download=" (.getQuery uri))))
    (swap! visited vary-meta assoc :anchor-click? true)
    true))

(defn on-navigate
  [{:keys [path query-params] :as m}]
  (.then (shared/api path {:query-params query-params})
         ;; A hack for client redirects since we are not allowed to intercept
         ;; any 30x status codes coming from the server from JS.
         #(do
            ;; Always clear existing fetches for the same resource.
            (shared/clear-fetch path)
            (if-let [redirect-path (shared/x-header (:headers %) :redirect)]
              ;; Further distinguish between internal/SPA and external redirects.
              (if (str/starts-with? redirect-path "/")
                (let [replace? (= "T" (shared/x-header (:headers %) :replace))]
                  (shared/navigate-to redirect-path replace?))
                (js/window.location.replace redirect-path))
              (let [{:keys [scroll]} @shared/post-navigate
                    headers        (:headers %)
                    page           (shared/x-header headers :page)
                    body           (not-empty (:body %))
                    page-component (com/page-shell page body)
                    page-title     (shared/x-header headers :title)]
                (set! js/document.title page-title)
                (reset! location {:path    path
                                  :headers headers
                                  :data    body})
                ;; A hack to handle scroll to for diagrams specifically.
                ;; Otherwise, we scroll to the cached Y position (if available).
                (when-not (= scroll :diagram)
                  (when-let [url (shared/response->url %)]
                    (update-scroll-state! url)))
                ;; Ensure that the search overlay closes when clicking 'back'.
                (js/document.activeElement.blur)
                (rum/mount page-component @root)

                ;; Allow for certain behaviour to only occur after initial render.
                ;; This is basically a way to get avoid a mismatching state when
                ;; hydrating the DOM tree. Certain things must only be rendered
                ;; after the app has been hydrated, e.g. a loading indicator.
                (when-not com/*hydrated*
                  (set! com/*hydrated* true))

                ;; NOTE: this reset will run *after* refs are resolved!
                (reset! shared/post-navigate nil))))))

(defn set-up-navigation!
  []
  (rfe/start! (rf/router routes)
              on-navigate
              {:use-fragment         false
               :ignore-anchor-click? ignore-anchor-click?}))

(defn ^:dev/after-load render
  []
  (let [{:keys [data headers]} @location
        page-component (com/page-shell (shared/x-header headers :page) data)]
    (set-up-navigation!)                                    ; keep up-to-date
    (rum/mount page-component @root)))

(defn init!
  "The entry point of the frontend app."
  []
  (let [entry-url (str js/window.location.pathname js/window.location.search)]
    (.then (shared/api entry-url)
           #(let [data           (:body %)
                  page           (shared/x-header (:headers %) :page)
                  page-component (com/page-shell page data)]
              (shared/clear-fetch entry-url)
              (reset! root (rum/hydrate page-component app))
              (set-up-navigation!)))))
